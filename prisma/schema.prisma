// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int         @id @default(autoincrement())
  userId       String?     @unique
  password     String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  avatar       String      @default("")
  name         String      @default("")
  location     String      @default("")
  website      String      @default("")
  bio          String      @db.MediumText
  senderChat   Chat[]      @relation(name: "senderChat")
  receiverChat Chat[]      @relation(name: "receiverChat")
  tweets       Tweets[]
  answers      Answer[]
  likes        Likes[]
  bookmarks    Bookmarks[]
  msgs         Msg[]

  @@fulltext([userId])
}

model Tweets {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tweet     String      @db.MediumText
  answers   Answer[]
  likes     Likes[]
  bookmarks Bookmarks[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText
  tweets    Tweets?  @relation(fields: [tweetsId], references: [id], onDelete: Cascade)
  tweetsId  Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([tweetsId])
  @@index([userId])
}

model Bookmarks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tweets    Tweets   @relation(fields: [tweetsId], references: [id], onDelete: Cascade)
  tweetsId  Int

  @@index([userId])
  @@index([tweetsId])
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweets    Tweets   @relation(fields: [tweetsId], references: [id], onDelete: Cascade)
  tweetsId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
  @@index([tweetsId])
}

model Chat {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(name: "senderChat", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User     @relation(name: "receiverChat", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  msgs       Msg[]

  @@index([senderId])
  @@index([receiverId])
}

model Msg {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int

  @@index([userId])
  @@index([chatId])
}
